import { useRouter } from 'next/router'

const stages = [
  "m 340.84375,53.694357 -13.08649,26.35714 -24.76215,53.987903 -22.31263,53.52829 -7.75892,12.05831 6.65247,4.30872 10.94898,0.69613 0.46866,-5.23852 -7.23376,-1.82924 2.74149,-4.4809 22.11969,-53.48661 22.55357,-48.835103 13.32896,-27.5505 14.75307,20.75139 12.9668,15.40039 11.04046,8.792423 14.06222,4.25223 10.06306,40.06975 15.23075,48.09682 0.488,8.56753 -1.81929,47.18086 -2.51642,43.32266 -3.04413,34.51328 1.51522,29.3824 1.64024,15.92852 7.79844,19.87422 11.82343,22.65585 16.24726,27.42735 6.51291,14.55548 6.6977,14.70473 3.82261,18.51365 v 11.61675 l -0.49805,16.33751 -0.50977,25.20097 1.03595,24.43459 3.37948,20.81679 11.45996,35.66327 11.1582,34.50389 14.50919,36.78264 28.96425,-8.20448 40.07812,-5.00976 42.46484,-3.67579 11.50782,40.70118 30.24107,107.27399 19.68694,67.40653 18.32087,65.2461 -29.10463,11.82617 -33.41043,9.613 -22.3259,6.43583 -27.01088,0.649 -5.83928,15.61851 33.28487,0.8784 27.99693,-7.8853 36.05051,-11.06418 34.6529,-14.37584 -22.62305,-79.79799 -18.99414,-67.8418 -31.31641,-106.75 -13.74414,-48.60938 -50.88867,4.4043 -40.73438,5.0918 -14.47247,3.66484 -16.80526,-41.25389 -8.79161,-29.38535 -8.23284,-28.88777 -2.75501,-16.79436 -0.59934,-23.22879 0.85911,-27.25921 -0.55776,-19.63839 -2.12361,-17.86049 -4.45842,-14.79354 -7.05748,-15.00781 -7.38672,-13.63504 -13.96708,-25.45424 -12.51143,-24.40792 -5.83985,-17.47015 -1.86468,-13.63086 0.35714,-25.04911 1.97796,-30.69782 2.32282,-45.60213 2.2475,-43.86829 -7.54324,-0.0901 -0.5533,-15.15233 -28.25977,-94.4375 -10.7659,-2.54659 -10.23857,-4.826743 -13.90513,-15.5212 -21.58315,-30.94559 z",
  "m 585.91351,1010.5443 -0.28909,8.0023 5.42676,55.1798 12.34726,35.5553 22.34821,54.8448 13.06697,30.9855 11.85016,30.8703 -0.79492,26.7941 14.13895,23.7156 10.59571,16.6524 8.4375,-5.3692 -9.72433,-16.8621 -7.72852,-11.1638 1.46038,-35.4752 -12.29688,-35.6953 -15.48102,-36.6752 -15.01591,-31.8761 -16.50808,-48.9689 -5.43125,-51.5171 1.72931,-8.7927 z",
  "m 683.2789,1288.1524 -8.78622,4.7399 22.20654,29.0568 17.06338,19.998 16.08115,14.1485 10.88477,6.5312 29.98939,8.7291 4.29654,-14.5182 16.93114,2.0882 32.86496,7.1482 11.90094,1.3638 19.14621,-6.3864 -1.46624,-5.3499 -17.82087,5.4392 -8.88867,-1.8396 -34.81669,-7.356 -27.101,-4.1465 -2.72035,9.8086 -17.33372,-4.7147 -9.19014,-5.9686 -14.73096,-11.9886 -17.4082,-19.3984 z",
  "m 913.04632,602.75518 -2.95871,9.57366 -12.94141,19.37444 -14.75893,23.7327 -12.71735,26.66044 -9.28069,31.23856 -6.00028,29.10854 -11.14816,56.17662 -5.74581,19.24916 -18.0985,46.5784 -19.69391,54.52903 -1.01869,7.97683 5.9746,7.24526 6.8284,17.04966 16.32338,5.53879 21.685,4.30608 28.66936,3.67551 34.05497,4.01897 28.55552,4.73437 20.60882,6.34542 17.84013,10.18695 17.66515,15.92683 10.84659,14.6476 8.6724,17.4308 4.7816,16.3195 1.539,14.5494 -1.1604,21.4157 -7.4029,23.7816 -11.6616,30.9076 -8.17629,30.1755 -15.18838,62.901 -3.18387,7.7985 -15.64593,1.0162 -17.25251,7.9015 -9.77065,6.9222 -12.34068,11.5851 -14.56808,13.4986 -21.66602,23.9874 -7.66016,13.233 -8.4573,15.147 -6.51814,9.1061 -7.7779,7.546 1.7592,5.0541 8.44588,-6.2946 8.17745,-8.4384 9.60101,-17.5915 8.26367,-14.0976 16.11691,-17.5455 15.67494,-16.0321 10.25,-9.5089 14.00586,-7.6392 15.59654,-6.7152 16.38282,-0.5293 12.73145,-4.5357 5.94569,-10.25 6.51589,-38.9322 6.7975,-29.6579 16.8663,-48.9459 10.2849,-33.6998 1.1038,-20.1063 -1.4394,-19.159 -5.9727,-20.101 -7.8359,-16.4319 -11.3761,-16.84989 -26.68253,-24.19476 -20.1875,-10.24553 -19.42495,-5.77121 -27.41546,-3.76451 -30.34878,-5.07281 -28.19196,-3.45201 -25.5731,-4.19281 -15.40346,-4.62249 -1.1303,-5.29827 -3.05999,-6.72126 5.91295,-19.20173 14.30552,-34.98075 19.03627,-48.8443 5.54409,-22.18416 11.08091,-56.12249 5.70842,-26.5798 8.66268,-26.85798 11.98995,-27.47154 12.28516,-18.45731 14.57226,-21.0318 5.3019,-17.17495 z",
  "m 931.08594,286.99988 -37.71596,3.60128 -37.89649,3.93276 -36.39732,6.8351 -25.69643,6.28571 2.16992,10.29744 29.83846,-6.21345 32.35211,-6.19978 36.9255,-4.10351 37.10575,-4.43555 h 34.74945 l 0.26534,22.81781 0.53571,59.37053 -3.14732,33.21429 -6.50195,31.83789 -9.08315,34.93191 -11.87737,37.68806 -7.9488,31.61663 -15.48381,53.9428 15.89882,3.14215 14.91647,-51.10894 10.62248,-39.09808 10.97963,-36.24093 8.95146,-35.60435 5.9986,-28.69755 3.28209,-36.42941 0.17857,-58.66378 -0.0921,-32.36189 z",
  "m 334.69281,46.020247 -15.37807,30.97433 -16.96011,37.886713 -11.0731,24.64956 -9.83119,24.12863 -7.66686,19.91546 -11.71,17.87523 5.75488,4.09459 8.2604,4.37406 14.19504,0.58597 0.24121,-5.87394 -10.94898,-0.69613 -6.65247,-4.30872 7.75892,-12.05831 10.72432,-26.69309 12.31167,-28.36941 11.06919,-24.2807 13.30804,-29.254463 12.74805,-25.27567 6.22628,-2.98856 21.58315,30.94559 13.90513,15.5212 10.23857,4.826743 10.7659,2.54659 13.96401,49.05971 9.39146,30.67857 4.9043,14.69922 0.67271,15.18527 11.08482,0.3351 20.23828,-0.7168 21.01144,0.52706 21.66867,7.65653 22.0258,8.01368 17.93304,10.27734 16.59738,19.61719 8.21456,15.19893 15.86942,25.69755 12.43834,12.82784 12.59487,10.64286 14.9746,8.55665 13.39649,5.35937 11.54297,2.19727 h 15.18164 l 20.63672,-0.51563 21.4495,-2.7048 30.7592,-6.34179 35.92356,-8.33678 19.42047,-4.31892 -2.24526,-10.4174 -19.55719,4.71121 -37.33817,8.94754 -25.98131,5.00977 -23.42299,3.47266 -19.76953,0.49414 h -12.32562 l -11.09849,-2.73466 -12.21456,-5.63504 -12.77484,-6.89119 -11.23493,-9.14341 -11.86105,-11.95006 -13.30218,-21.36663 -10.74302,-18.15987 -12.15234,-16.27511 -10.81641,-10.79353 -23.77777,-10.29102 -37.17061,-13.32673 -23.98912,-0.007 -20.11719,0.71289 -4.09542,-0.0226 -0.21875,-7.13784 -6.52651,-21.37276 -8.46624,-29.14314 -8.53459,-29.51033 -5.12779,-18.704793 -22.97489,-7.13533 -11.09515,-11.6222 -26.45313,-37.26926 z"
]

export default () => {
  const router = useRouter()
  const { cur_stage, vx="0", vy="0", w="1536", h="1792" } = router.query

  return (
    <main className="container mx-auto p-4">
      <div>
        <svg viewBox={`${vx} ${vy} ${w} ${h}`}>
          <image x="0" y="0" href="/seaton_large.png" width="1536" height="1792" />
          {stages.filter((stage, index) => index == cur_stage).map((stage) => {
            return (
              <path strokeWidth="2" stroke="#43dd00" fill="#43dd00" fillOpacity="0.5" d={stage} />
            )
          })}
          {stages.filter((stage, index) => index != cur_stage).map((stage) => {
            return (
              <path strokeWidth="2" stroke="#ffa400" fill="#ffa400" fillOpacity="0.5" d={stage} />
            )
          })}
        </svg>
      </div>
    </main>
  )
}